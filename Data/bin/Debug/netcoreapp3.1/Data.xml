<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Data</name>
    </assembly>
    <members>
        <member name="T:Data.Attributes.EmailUserUniqueAttribute">
            <summary>
            A custom attribute which ensures that the user's email address is unique to the database.
            </summary>
        </member>
        <member name="M:Data.Attributes.EmailUserUniqueAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Performs a validation check on the value of the user's email address to ensure that it is unique.
            </summary>
            <param name="value">The value of the user's email address.</param>
            <param name="validationContext">Describes the context in which a validation check is performed.</param>
            <returns>A container for the results of a validation request.</returns>
        </member>
        <member name="M:Data.Attributes.EmailUserUniqueAttribute.GetErrorMessage(System.String)">
            <summary>
            Prepares an error message for duplicate email address.
            </summary>
            <param name="email">The duplicate email address.</param>
            <returns>An error message for duplicate email address as a string.</returns>
        </member>
        <member name="T:Data.Attributes.UniquePassengerPIN">
            <summary>
            A custom attribute which ensures that the passenger's personal identification number is unique to the database.
            It also ensures that the passenger's personal identification number is unique to the list which holds pending passengers.<see cref="T:Data.Static.ReservationAssistant"/>
            </summary>
        </member>
        <member name="M:Data.Attributes.UniquePassengerPIN.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Performs a validation check on the value of the passenger's personal identification number to ensure that it is unique.
            </summary>
            <param name="value">The value of the passenger's personal identification number.</param>
            <param name="validationContext">Describes the context in which a validation check is performed.</param>
            <returns>A container for the results of a validation request.</returns>
        </member>
        <member name="M:Data.Attributes.UniquePassengerPIN.CheckPassengerPIN(System.Object)">
            <summary>
            Checks if the passenger's personal identification number is unique to the database.
            </summary>
            <param name="value">The personal identification number of the passenger.</param>
            <returns>A bool value which indicates whether the passenger's personal identification number is unique to the database.</returns>
        </member>
        <member name="T:Data.Attributes.UniqueUserPIN">
            <summary>
            A custom attribute which ensures that the user's personal identification number is unique to the database.
            </summary>
        </member>
        <member name="M:Data.Attributes.UniqueUserPIN.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Performs a validation check on the value of the user's personal identification number to ensure that it is unique.
            </summary>
            <param name="value">The value of the user's personal identification number.</param>
            <param name="validationContext">Describes the context in which a validation check is performed.</param>
            <returns>A container for the results of a validation request.</returns>
        </member>
        <member name="M:Data.Attributes.UniqueUserPIN.CheckUserPIN(System.Object)">
            <summary>
            Checks if the user's personal identification number is unique to the database.
            </summary>
            <param name="value">The personal identification number of the user.</param>
            <returns>A bool value which indicates whether the user's personal identification number is unique to the database.</returns>
        </member>
        <member name="T:Data.Attributes.UnlikeAttribute">
            <summary>
            A custom attribute which ensures that the value of a certain property does not match the value of another property.
            </summary>
        </member>
        <member name="P:Data.Attributes.UnlikeAttribute.OtherProperty">
            <summary>
            The name of the other property which will be used for validation.
            </summary>
        </member>
        <member name="M:Data.Attributes.UnlikeAttribute.#ctor(System.String)">
            <summary>
            The constructor of the UnlikeAttribute class which prepares the data for validation.
            </summary>
            <param name="otherProperty">The name of the other property</param>
        </member>
        <member name="M:Data.Attributes.UnlikeAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Performs a validation check on the value of the current property to ensure that it is different from the other property's value.
            </summary>
            <param name="value">The value of the current property which should not match the other property's value.</param>
            <param name="validationContext">Describes the context in which a validation check is performed.</param>
            <returns>A container for the results of a validation request.</returns>
        </member>
        <member name="T:Data.Attributes.ValidFlightTimesAttribute">
            <summary>
            A custom attribute which ensures that the flight's departure time is before its landing time.
            </summary>
        </member>
        <member name="M:Data.Attributes.ValidFlightTimesAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Performs a validation check which attempts to confirm that the flight's departure time is before its landing time.
            </summary>
            <param name="value">The flight's departure time.</param>
            <param name="validationContext">Describes the context in which a validation check is performed.</param>
            <returns>A container for the results of a validation request.</returns>
        </member>
        <member name="T:Data.Context.FlightManagerDbContext">
            <summary>
            The database context for the "FlightManager" project. It inherits the IdentityDbContext class with an extended version of IdentityUser class.
            The database contains all tables needed for implementing authentication and authorization. As an addition, it contains the "Flights", "Reservations" and "Passengers" tables
            which exist for providing the rest of the functionalities of the project.
            </summary>
        </member>
        <member name="P:Data.Context.FlightManagerDbContext.Flights">
            <summary>
            A <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1"/> for the <see cref="T:Data.Models.Flight"/> class.
            </summary>
        </member>
        <member name="P:Data.Context.FlightManagerDbContext.Reservations">
            <summary>
            A <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1"/> for the <see cref="T:Data.Models.Reservation"/> class.
            </summary>
        </member>
        <member name="P:Data.Context.FlightManagerDbContext.Passengers">
            <summary>
            A <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1"/> for the <see cref="T:Data.Models.Passenger"/> class.
            </summary>
        </member>
        <member name="M:Data.Context.FlightManagerDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{Data.Context.FlightManagerDbContext})">
            <summary>
            A constructor for the FlightManagerDbContext with default options.
            </summary>
            <param name="options"><see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1"/></param>
        </member>
        <member name="M:Data.Context.FlightManagerDbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            A Fluent API which lets you modify how your database entities are mapped. In this case, there are added restrictions which make
            the personal identification numbers of both the users and the passengers unique columns.
            </summary>
            <param name="builder"><see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder"/></param>
        </member>
        <member name="M:Data.Context.FlightManagerDbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            A method which lets you configure the database to be used for this context. The connection string for the database is set here.
            Lazy-loading proxies are enabled.
            </summary>
            <param name="optionsBuilder"><see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder"/></param>
        </member>
        <member name="T:Data.Models.Flight">
            <summary>
            The class contains information about plane flights. Reservations can be made for these flights.
            </summary>
        </member>
        <member name="P:Data.Models.Flight.UniquePlaneNumber">
            <summary>
            An unique plane number for the flight. It serves the purpose of a primary key for the database.
            </summary>
        </member>
        <member name="P:Data.Models.Flight.LocationFrom">
            <summary>
            The location from where the plane departs. The property is required and its length cannot exceed 50 characters.
            </summary>
        </member>
        <member name="P:Data.Models.Flight.LocationTo">
            <summary>
            The destination where the plane will arrive. The property is required and its length cannot exceed 50 characters.
            Also it must be different from the departure location.
            </summary>
        </member>
        <member name="P:Data.Models.Flight.DepartureTime">
            <summary>
            The time when the plane will depart. This property is required. It must be before the landing time.
            </summary>
        </member>
        <member name="P:Data.Models.Flight.LandingTime">
            <summary>
            The time when the plane will arrive at its destination. This property is required.
            </summary>
        </member>
        <member name="P:Data.Models.Flight.PlaneType">
            <summary>
            The type of the plane. The property is required and its length cannot exceed 50 characters.
            </summary>
        </member>
        <member name="P:Data.Models.Flight.PilotName">
            <summary>
            The name of the person who pilots the plane. The property is required and its length cannot exceed 50 characters.
            Also it can contain only letters.
            </summary>
        </member>
        <member name="P:Data.Models.Flight.FreePassengerSeats">
            <summary>
            The amount of free passenger seats for the economy class. This property is required.
            </summary>
        </member>
        <member name="P:Data.Models.Flight.FreeBusinessSeats">
            <summary>
            The amount of free passenger seats for the business class. This property is required.
            </summary>
        </member>
        <member name="P:Data.Models.Flight.FlightGeneralInfo">
            <summary>
            A property which is not mapped to the database. It returns general information about the flight which includes
            its unique plane number, departure location and destination.
            </summary>
        </member>
        <member name="P:Data.Models.Flight.Reservations">
            <summary>
            A navigation property used for configuring relation to the <see cref="T:Data.Models.Reservation"/> entities.
            </summary>
        </member>
        <member name="M:Data.Models.Flight.#ctor">
            <summary>
            A constructor which sets an empty HashSet as a value to the <see cref="P:Data.Models.Flight.Reservations"/> navigation property.
            </summary>
        </member>
        <member name="T:Data.Models.FlightIndexViewModel">
            <summary>
            Class for paging Flights Index view
            </summary>
        </member>
        <member name="T:Data.Models.Passenger">
            <summary>
            The class represents the passengers who will have reservation for the flights.
            </summary>
        </member>
        <member name="P:Data.Models.Passenger.Id">
            <summary>
            The primary key for the database.
            </summary>
        </member>
        <member name="P:Data.Models.Passenger.PersonalIdentificationNumber">
            <summary>
            Each passenger has unique personal identification number (PIN) which consists of only 10 digits.
            The personal identification number is the equivalent of the bulgarian "ЕГН". This property is required.
            </summary>
        </member>
        <member name="P:Data.Models.Passenger.FirstName">
            <summary>
            The first name of the passenger. This property is required. It cannot exceed 50 characters and contains only letters.
            </summary>
        </member>
        <member name="P:Data.Models.Passenger.MiddleName">
            <summary>
            The middle name of the passenger. This property is required. It cannot exceed 50 characters and contains only letters.
            </summary>
        </member>
        <member name="P:Data.Models.Passenger.LastName">
            <summary>
            The last name of the passenger. This property is required. It cannot exceed 50 characters and contains only letters.
            </summary>
        </member>
        <member name="P:Data.Models.Passenger.PhoneNumber">
            <summary>
            The phone number of the passenger. It consists of 10 digits and it is required.
            </summary>
        </member>
        <member name="P:Data.Models.Passenger.Nationality">
            <summary>
            The nationality of the passenger. This property is required. It cannot exceed 50 characters and contains only letters.
            </summary>
        </member>
        <member name="P:Data.Models.Passenger.TicketType">
            <summary>
            The ticket type which the passenger has. It can be either normal (economy) class or business class.
            </summary>
        </member>
        <member name="P:Data.Models.Passenger.ReservationId">
            <summary>
            A navigation property used for configuring the relation to the  <see cref="T:Data.Models.Reservation"/> entities.
            </summary>
        </member>
        <member name="P:Data.Models.Passenger.Reservation">
            <summary>
            A navigation property used for configuring the relation to the  <see cref="T:Data.Models.Reservation"/> entities.
            </summary>
        </member>
        <member name="T:Data.Models.PassengerIndexViewModel">
            <summary>
            Class for paging Passengers Index view
            </summary>
        </member>
        <member name="T:Data.Models.Reservation">
            <summary>
            The class which represents the flight reservations. One reservation can be made for more than one passenger. The only limit
            to how many passengers a reservation can have is the amount of free seats for the flight.
            </summary>
        </member>
        <member name="P:Data.Models.Reservation.Id">
            <summary>
            The primary key for the database.
            </summary>
        </member>
        <member name="P:Data.Models.Reservation.FlightUniquePlaneNumber">
            <summary>
            A navigation property used for configuring the relation to the <see cref="T:Data.Models.Flight"/> entities.
            </summary>
        </member>
        <member name="P:Data.Models.Reservation.Flight">
            <summary>
            A navigation property used for configuring the relation to the <see cref="T:Data.Models.Flight"/> entities.
            </summary>
        </member>
        <member name="P:Data.Models.Reservation.Email">
            <summary>
            The email address on which the reservation is made. It will receive an email whenever a reservation is made. This email will 
            notify the user if the reservation is successful and give him extra information about the flight for which the reservation is
            made. This property is required.
            </summary>
        </member>
        <member name="P:Data.Models.Reservation.Passengers">
            <summary>
            A navigation property used for configuring the relation to the <see cref="T:Data.Models.Passenger"/> entities.
            </summary>
        </member>
        <member name="M:Data.Models.Reservation.#ctor">
            <summary>
            A constructor which sets an empty HashSet as a value to the <see cref="P:Data.Models.Reservation.Passengers"/> navigation property.
            </summary>
        </member>
        <member name="T:Data.Models.ReservationIndexViewModel">
            <summary>
            Class for paging Reservations Index view
            </summary>
        </member>
        <member name="T:Data.Models.User">
            <summary>
            The class represents the users who are registered on the FlightManager website. This class is an extended version
            of the <see cref="T:Microsoft.AspNetCore.Identity.IdentityUser"/> class. It is used for authentication and authorization.
            </summary>
        </member>
        <member name="P:Data.Models.User.FirstName">
            <summary>
            The first name of the user. This property is required. It cannot exceed 50 characters and contains only letters.
            </summary>
        </member>
        <member name="P:Data.Models.User.PhoneNumber">
            <summary>
            The phone number of the user. This property is required. It consists of only 10 digits.
            </summary>
        </member>
        <member name="P:Data.Models.User.LastName">
            <summary>
            The last name of the user. This property is required. It cannot exceed 50 characters and contains only letters.
            </summary>
        </member>
        <member name="P:Data.Models.User.PersonalIdentificationNumber">
            <summary>
            Each user has unique personal identification number (PIN) which consists of only 10 digits.
            The personal identification number is the equivalent of the bulgarian "ЕГН". This property is required.
            </summary>
        </member>
        <member name="P:Data.Models.User.Address">
            <summary>
            The address where the user lives. This property is required. It cannot exceed 50 characters and contains only letters.
            </summary>
        </member>
        <member name="P:Data.Models.User.Role">
            <summary>
            The role of the user. In this application there are only 2 roles. The "User" role indicates that the user is an employee of the FlightManager company and it
            does not offer him special privileges on the website. The "Admin" role grants the user full access to the website. There can be only 1 administrator. They have
            access to all CRUD operations over the other users in the database. The administrator can also add flights to the database and modify them.
            </summary>
        </member>
        <member name="T:Data.Models.UserEditViewModel">
            <summary>
            Almost identical to the <see cref="T:Data.Models.User"/> class. The difference is that this model is used for
            the validation of user data which is being modified. The <see cref="P:Data.Models.UserEditViewModel.PersonalIdentificationNumber"/> property does not contain
            the attribute which ensures that its value is unique to the database.
            </summary>
        </member>
        <member name="P:Data.Models.UserEditViewModel.FirstName">
            <summary>
            <inheritdoc cref="P:Data.Models.User.FirstName"/>
            </summary>
        </member>
        <member name="P:Data.Models.UserEditViewModel.PhoneNumber">
            <summary>
            <inheritdoc cref="P:Data.Models.User.PhoneNumber"/>
            </summary>
        </member>
        <member name="P:Data.Models.UserEditViewModel.LastName">
            <summary>
            <inheritdoc cref="P:Data.Models.User.LastName"/>
            </summary>
        </member>
        <member name="P:Data.Models.UserEditViewModel.PersonalIdentificationNumber">
            <summary>
            <inheritdoc cref="P:Data.Models.User.PersonalIdentificationNumber"/>
            </summary>
        </member>
        <member name="P:Data.Models.UserEditViewModel.Address">
            <summary>
            <inheritdoc cref="P:Data.Models.User.Address"/>
            </summary>
        </member>
        <member name="P:Data.Models.UserEditViewModel.Role">
            <summary>
            <inheritdoc cref="P:Data.Models.User.Role"/>
            </summary>
        </member>
        <member name="T:Data.Models.UserIndexViewModel">
            <summary>
            Class for paging Users Index view
            </summary>
        </member>
        <member name="T:Data.Shared.PagerViewModel">
            <summary>
            Class for properties used for paging the Index views
            </summary>
        </member>
        <member name="T:Data.Static.ReservationAssistant">
            <summary>
            A static class which provides methods for the creation of reservations. It also stores data of pending passengers and their reservation which are not
            ready to be added to the database.
            </summary>
        </member>
        <member name="P:Data.Static.ReservationAssistant.PendingReservation">
            <summary>
            The pending reservation which cannot be completed because the amount of free seats for the flight are not checked and the user has not finished adding passengers
            to the reservation. This static property stores data temporarily.
            </summary>
        </member>
        <member name="P:Data.Static.ReservationAssistant.PendingPassengers">
            <summary>
            The pending passengers which cannot be added to the database because the amount of free seats for the flight are not checked and the user has not finished adding passengers
            to the reservation. This static property stores data temporarily.
            </summary>
        </member>
        <member name="M:Data.Static.ReservationAssistant.ClearPendingPassengers">
            <summary>
            Removes the pending passengers from the static <see cref="T:Data.Static.ReservationAssistant"/> class because they will be replaced by new ones for future reservations.
            It is used when the pending reservation has changed or been finished.
            </summary>
        </member>
        <member name="M:Data.Static.ReservationAssistant.PrepareEmail(System.Text.StringBuilder)">
            <summary>
            Prepares the whole email by configuring its sender, receiver, subject and body. A dedicated gmail account exists as the sender.
            The receiver is the email which the user specifies while creating the reservation. The email is about the status of the reservation
            and notifies the user if it is successful or not.
            </summary>
            <param name="emailBody">The completed email body which is formatted text. The email body is a StringBuilder object.<see cref="T:System.Text.StringBuilder"/></param>
            <returns>A <see cref="T:MimeKit.MimeMessage"/> object representing an email which is ready to be sent.</returns>
        </member>
        <member name="M:Data.Static.ReservationAssistant.GetFlightByUniquePlaneNumber(System.Int32)">
            <summary>
            Extracts a flight from the database using its unique plane number.
            </summary>
            <param name="uniquePlaneNumber">The unique plane number of the flight.</param>
            <returns>A <see cref="T:Data.Models.Flight"/> object.</returns>
        </member>
        <member name="M:Data.Static.ReservationAssistant.GetSuccessfulReservationInformation(System.Text.StringBuilder,Data.Models.Flight)">
            <summary>
            Prepares a part of the email body when the reservation is successful. It includes information
            about the passengers and the flight related to the reservation.
            </summary>
            <param name="emailBody">A <see cref="T:System.Text.StringBuilder"/> object which contains the email body.</param>
            <param name="flight">The fight for which the reservation is being made.<see cref="T:Data.Models.Flight"/></param>
            <returns>The modified email body which is formatted text. The email body is still a <see cref="T:System.Text.StringBuilder"/> object.</returns>
        </member>
        <member name="M:Data.Static.ReservationAssistant.GetFailedReservationInformation(System.Text.StringBuilder)">
            <summary>
            Prepares a part of the email body when the reservation is unsuccessful. It includes information
            about the passengers related to the reservation.
            </summary>
            <param name="emailBody">A <see cref="T:System.Text.StringBuilder"/> object which contains the email body.</param>
            <returns>The modified email body which is formatted text. The email body is still a <see cref="T:System.Text.StringBuilder"/> object.</returns>
        </member>
        <member name="M:Data.Static.ReservationAssistant.PrepareTheWholeEmailBody(System.Boolean)">
            <summary>
            Prepares the whole email body depending on the status of the reservation. It can either create an email body for successful or failed
            reservation.
            </summary>
            <param name="isSuccessfulReservation">The status of the reservation. A bool which indicates whether or not the reservation is successful.</param>
            <returns>The completed email body which is formatted text. The email body is a <see cref="T:System.Text.StringBuilder"/> object.</returns>
        </member>
        <member name="M:Data.Static.ReservationAssistant.SendEmail(MimeKit.MimeMessage)">
            <summary>
            Connects to a dedicated gmail account which sends an email to the user.
            </summary>
            <param name="email">A <see cref="T:MimeKit.MimeMessage"/> object representing an email which is ready to be sent.</param>
        </member>
    </members>
</doc>
