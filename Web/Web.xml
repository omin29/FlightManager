<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Web</name>
    </assembly>
    <members>
        <member name="T:Web.Controllers.FlightsController">
            <summary>
            The controller which is responsible for flight CRUD operations.
            </summary>
        </member>
        <member name="M:Web.Controllers.FlightsController.#ctor(Data.Context.FlightManagerDbContext)">
            <summary>
            Standard constructor which initializes a context used by the controller.
            </summary>
            <param name="context">The flight manager context.</param>
        </member>
        <member name="M:Web.Controllers.FlightsController.Index(System.String,Data.Models.FlightIndexViewModel,System.Int32)">
            <summary>
            The Flights controller for the Index page. Supports pagination and filtration
            </summary>
            <param name="searchString">string for filtering Flights with given from location and to location</param>
            <param name="model">FlightIndexViewModel object used to display filtered or paged records from Flights</param>
            <param name="pages">int for the amount of records to be shown on a single page</param>
            <returns>Returns Flights Index View with the filtered Flights(if entered search string) otherwise pages all records</returns>
        </member>
        <member name="M:Web.Controllers.FlightsController.Details(System.Nullable{System.Int32})">
            <summary>
            The Flights controller for the Details page. Shows details about the Flight and Passengers in selected Flight
            </summary>
            <param name="id">int for Flight id to find Passengers</param>
            <returns>Returns Flight Detail page showing information for both the Flight and its Passengers</returns>
        </member>
        <member name="M:Web.Controllers.FlightsController.Create">
            <summary>
            Returns the form for flight creation which the user will fill. Accessible only by the administrator.
            </summary>
            <returns>Flight creation view.</returns>
        </member>
        <member name="M:Web.Controllers.FlightsController.Create(Data.Models.Flight)">
            <summary>
            Creates a <see cref="T:Data.Models.Flight"/> object with the information provided by the user and adds it to the database. Accessible only by the administrator.
            </summary>
            <param name="flight">The flight which will be added to the database.</param>
            <returns>The index page for flights.</returns>
        </member>
        <member name="M:Web.Controllers.FlightsController.Edit(System.Nullable{System.Int32})">
            <summary>
            Finds a flight from the database by using its primary key and prepares it for edit. Accessible only by the administrator.
            </summary>
            <param name="id">The id of the flight which will be edited.</param>
            <returns>Flight edit view</returns>
        </member>
        <member name="M:Web.Controllers.FlightsController.Edit(System.Int32,Data.Models.Flight)">
            <summary>
            Edits a flight and saves the changes to the database. Accessible only by the administrator.
            </summary>
            <param name="id">The primary key of the flight</param>
            <param name="flight">The modified flight which will be saved.</param>
            <returns>The index page for flights.</returns>
        </member>
        <member name="M:Web.Controllers.FlightsController.Delete(System.Nullable{System.Int32})">
            <summary>
            Prepares a flight for deletion. Accessible only by the administrator.
            </summary>
            <param name="id">Primary key of the flight which will be deleted</param>
            <returns>Flight delete view</returns>
        </member>
        <member name="M:Web.Controllers.FlightsController.DeleteConfirmed(System.Int32)">
            <summary>
            Deletes the flight after receiving confirmation from the user. Accessible only by the administrator.
            </summary>
            <param name="id">Primary key of the deleted flight.</param>
            <returns>The index page for flights.</returns>
        </member>
        <member name="M:Web.Controllers.FlightsController.FlightExists(System.Int32)">
            <summary>
            Checks if a flight exists in the database.
            </summary>
            <param name="id">Primary key of the flight.</param>
            <returns>A bool indicator which shows if the flight exists.</returns>
        </member>
        <member name="T:Web.Controllers.HomeController">
            <summary>
            Responsible for controlling the start page and successful start of the project
            </summary>
        </member>
        <member name="M:Web.Controllers.HomeController.Index">
            <summary>
            Ensures that roles and administrator account exist on project start. The administrator has a default password which can be changed in the future.
            </summary>
            <returns>The home page</returns>
        </member>
        <member name="T:Web.Controllers.PassengersController">
            <summary>
            The controller provides CRUD operations for the passengers in the database.
            </summary>
        </member>
        <member name="M:Web.Controllers.PassengersController.#ctor(Data.Context.FlightManagerDbContext)">
            <summary>
            Standard constructor which initializes a context used by the controller.
            </summary>
            <param name="context">The flight manager context.</param>
        </member>
        <member name="M:Web.Controllers.PassengersController.Index(System.String,Data.Models.PassengerIndexViewModel,System.Int32)">
            <summary>
            The Passengers controller for the Index page. Supports pagination and filtration
            </summary>
            <param name="searchString">string for filtering flights with given FirstName,MiddleName,LastName,PersonalIdentificationNumber</param>
            <param name="model">PassengerIndexViewModel object used to display filtered or paged records from Passengers</param>
            <param name="pages">int for the amount of records to be shown on a single page</param>
            <returns>Returns Passengers Index View with the filtered Passengers(if entered search string) otherwise pages all records</returns>
        </member>
        <member name="M:Web.Controllers.PassengersController.Details(System.Nullable{System.Int32})">
            <summary>
            Shows a detailed view of a passenger.
            </summary>
            <param name="id">Primary key of passenger.</param>
            <returns>Passenger detail view.</returns>
        </member>
        <member name="M:Web.Controllers.PassengersController.Create(System.String)">
            <summary>
            Prepares information about the reservation which is used in the creating form for passengers.
            </summary>
            <param name="reservationId">Primary key of the reservation for which the passenger is made.</param>
            <returns>Passenger creation view.</returns>
        </member>
        <member name="M:Web.Controllers.PassengersController.Create(Data.Models.Passenger,System.String)">
            <summary>
            Creates a passenger which goes to a pending list. This process repeats until the user stops adding passengers to the reservation.
            After the users confirmation a final method for finishing the reservation is called.
            </summary>
            <param name="passenger">A passenger created by the user</param>
            <param name="finishAdding">A bool value which indicates if the user has finished adding passengers to the reservation.</param>
            <returns>The <see cref="M:Web.Controllers.PassengersController.FinishReservation"/> method.</returns>
        </member>
        <member name="M:Web.Controllers.PassengersController.FinishReservation">
            <summary>
            Finishes the reservation of passengers. It adds the pending passengers and reservation to the database if it is possible
            and updates the free flight seats number. An email is sent to the email address provided by the user for the reservation.
            Depending on the circumstances this email will notify the user if the reservation has been successful or not by providing
            information about the flight and passengers related to the reservation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Controllers.ReservationsController">
            <summary>
            A controller which provides CRUD operations for the reservations in the database.
            </summary>
        </member>
        <member name="M:Web.Controllers.ReservationsController.#ctor(Data.Context.FlightManagerDbContext)">
            <summary>
            Standard constructor which initializes a context used by the controller.
            </summary>
            <param name="context">The flight manager context.</param>
        </member>
        <member name="M:Web.Controllers.ReservationsController.Index(System.String,Data.Models.ReservationIndexViewModel,System.Int32)">
            <summary>
            The Reservations controller for the Index page. Supports pagination and filtration
            </summary>
            <param name="searchString">string for filtering Reservations with given Email</param>
            <param name="model">ReservationIndexViewModel object used to display filtered or paged records from Reservations</param>
            <param name="pages">int for the amount of records to be shown on a single page</param>
            <returns>Returns Reservations Index View with the filtered Reservations(if entered search string) otherwise pages all records</returns>
        </member>
        <member name="M:Web.Controllers.ReservationsController.Details(System.Nullable{System.Int32})">
            <summary>
            The Reservation controller for the Details page. Shows details about the Reservation and the Passengers in it
            </summary>
            <param name="id">int id for the reserved Flight</param>
            <returns>Returns Reservation Detail page showing information for both the Reservation and the Passengers</returns>
        </member>
        <member name="M:Web.Controllers.ReservationsController.Create">
            <summary>
            Prepares flight information for reservation creation and sends it to the reservation creation view.
            </summary>
            <returns>Reservation creation view.</returns>
        </member>
        <member name="M:Web.Controllers.ReservationsController.Create(Data.Models.Reservation)">
            <summary>
            Creates a pending reservation and redirects towards passenger creation method because the reservation needs passengers.
            </summary>
            <param name="reservation">The reservation created by the user</param>
            <returns><see cref="M:Web.Controllers.PassengersController.Create(System.String)"/></returns>
        </member>
        <member name="T:Web.Controllers.UsersController">
            <summary>
            The controller which is responsible for user CRUD operations. Accessible only by the administrator.
            </summary>
        </member>
        <member name="M:Web.Controllers.UsersController.#ctor(Data.Context.FlightManagerDbContext)">
            <summary>
            Standard constructor which initializes a context used by the controller.
            </summary>
            <param name="context">The flight manager context.</param>
        </member>
        <member name="M:Web.Controllers.UsersController.Index(System.String,Data.Models.UserIndexViewModel,System.Int32)">
            <summary>
            The Users controller for the Index page. Supports pagination and filtration
            </summary>
            <param name="searchString">string for filtering users with given UserName,FirstName,LastName,Email</param>
            <param name="model">UserIndexViewModel object used to display filtered or paged records from Users</param>
            <param name="pages">int for the amount of records to be shown on a single page</param>
            <returns>Returns Users Index View with the filtered Users(if entered search string) otherwise pages all records</returns>
        </member>
        <member name="M:Web.Controllers.UsersController.Details(System.String)">
            <summary>
            Returns a detailed view for a user.
            </summary>
            <param name="id">Primary key of the user</param>
            <returns>User detail view.</returns>
        </member>
        <member name="M:Web.Controllers.UsersController.Create">
            <summary>
            Redirects to the user registration form.
            </summary>
            <returns>User registration form.</returns>
        </member>
        <member name="M:Web.Controllers.UsersController.Edit(System.String)">
            <summary>
            Finds an user from the database using its primary key and prepares it for edit.
            </summary>
            <param name="id">Primary key of the user</param>
            <returns>User edit view.</returns>
        </member>
        <member name="M:Web.Controllers.UsersController.Edit(System.String,Data.Models.UserEditViewModel)">
            <summary>
            Takes an edited <see cref="T:Data.Models.User"/> object and saves its changes to the database.
            </summary>
            <param name="id">Primary key of the user</param>
            <param name="model">The edited user.</param>
            <returns>The index page for users.</returns>
        </member>
        <member name="M:Web.Controllers.UsersController.Delete(System.String)">
            <summary>
            Extracts an user from the database and prepares it for delete.
            </summary>
            <param name="id">Primary key of user.</param>
            <returns>User delete view.</returns>
        </member>
        <member name="M:Web.Controllers.UsersController.DeleteConfirmed(System.String)">
            <summary>
            Deletes an user from the database after receiving a confirmation. The administrator account cannot be deleted.
            </summary>
            <param name="id">Primary key of user</param>
            <returns>The index page for users.</returns>
        </member>
        <member name="M:Web.Controllers.UsersController.UserExists(System.String)">
            <summary>
            Checks if an user exists in the database by searching for it with primary key.
            </summary>
            <param name="id">Primary key of user</param>
            <returns>A bool value which indicates if the user exists.</returns>
        </member>
        <member name="T:Web.Pagers.FlightPager">
            <summary>
            Static class to store searched string and paging amount for Flights
            </summary>
        </member>
        <member name="T:Web.Pagers.PassengerPager">
            <summary>
            Static class to store searched string and paging amount for Passengers
            </summary>
        </member>
        <member name="T:Web.Pagers.ReservationPager">
            <summary>
            Static class to store searched string and paging amount for Reservations
            </summary>
        </member>
        <member name="T:Web.Pagers.UserPager">
            <summary>
            Static class to store searched string and paging amount for Users
            </summary>
        </member>
        <member name="T:Web.Startup">
            <summary>
            This class is used for configuring startup options for the flight manager web application.
            </summary>
        </member>
    </members>
</doc>
